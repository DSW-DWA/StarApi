// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StarApi.Model;

#nullable disable

namespace StarApi.Migrations
{
    [DbContext(typeof(StarContext))]
    [Migration("20231208143418_AddTrigger")]
    partial class AddTrigger
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StarApi.Model.AlembicVersion", b =>
                {
                    b.Property<string>("VersionNum")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("version_num");

                    b.HasKey("VersionNum")
                        .HasName("alembic_version_pkc");

                    b.ToTable("alembic_version", (string)null);
                });

            modelBuilder.Entity("StarApi.Model.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NewValue")
                        .HasColumnType("text")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValue")
                        .HasColumnType("text")
                        .HasColumnName("old_value");

                    b.Property<string>("OperationType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("operation_type");

                    b.Property<Guid?>("RowId")
                        .HasColumnType("uuid")
                        .HasColumnName("row_id");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("table_name");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("audit_pkey");

                    b.ToTable("audit", (string)null);
                });

            modelBuilder.Entity("StarApi.Model.Constellation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("abbreviation");

                    b.Property<Guid?>("GalaxyId")
                        .HasColumnType("uuid")
                        .HasColumnName("galaxy_id");

                    b.Property<string>("History")
                        .HasColumnType("text")
                        .HasColumnName("history");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Shape")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("shape");

                    b.HasKey("Id")
                        .HasName("constellation_pkey");

                    b.HasIndex("GalaxyId");

                    b.ToTable("constellation", (string)null);
                });

            modelBuilder.Entity("StarApi.Model.Galaxy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Composition")
                        .HasColumnType("text")
                        .HasColumnName("composition");

                    b.Property<double?>("DistanceFromEarth")
                        .HasColumnType("double precision")
                        .HasColumnName("distance_from_earth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Shape")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("shape");

                    b.Property<double>("Size")
                        .HasColumnType("double precision")
                        .HasColumnName("size");

                    b.Property<Guid?>("UniverseId")
                        .HasColumnType("uuid")
                        .HasColumnName("universe_id");

                    b.HasKey("Id")
                        .HasName("galaxy_pkey");

                    b.HasIndex("UniverseId");

                    b.ToTable("galaxy", (string)null);
                });

            modelBuilder.Entity("StarApi.Model.Planet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Diameter")
                        .HasColumnType("double precision")
                        .HasColumnName("diameter");

                    b.Property<double>("DistanceFromStar")
                        .HasColumnType("double precision")
                        .HasColumnName("distance_from_star");

                    b.Property<double>("Mass")
                        .HasColumnType("double precision")
                        .HasColumnName("mass");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("StarId")
                        .HasColumnType("uuid")
                        .HasColumnName("star_id");

                    b.Property<double?>("SurfaceTemperature")
                        .HasColumnType("double precision")
                        .HasColumnName("surface_temperature");

                    b.HasKey("Id")
                        .HasName("planet_pkey");

                    b.HasIndex("StarId");

                    b.ToTable("planet", (string)null);
                });

            modelBuilder.Entity("StarApi.Model.Star", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("DistanceFromEarth")
                        .HasColumnType("double precision")
                        .HasColumnName("distance_from_earth");

                    b.Property<Guid?>("GalaxyId")
                        .HasColumnType("uuid")
                        .HasColumnName("galaxy_id");

                    b.Property<double>("Luminosity")
                        .HasColumnType("double precision")
                        .HasColumnName("luminosity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("SpectralType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("spectral_type");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.HasKey("Id")
                        .HasName("star_pkey");

                    b.HasIndex("GalaxyId");

                    b.ToTable("star", (string)null);
                });

            modelBuilder.Entity("StarApi.Model.Universe", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Composition")
                        .HasColumnType("text")
                        .HasColumnName("composition");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<double>("Size")
                        .HasColumnType("double precision")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("universe_pkey");

                    b.ToTable("universe", (string)null);
                });

            modelBuilder.Entity("StarConstellation", b =>
                {
                    b.Property<Guid>("StarId")
                        .HasColumnType("uuid")
                        .HasColumnName("star_id");

                    b.Property<Guid>("ConstellationId")
                        .HasColumnType("uuid")
                        .HasColumnName("constellation_id");

                    b.HasKey("StarId", "ConstellationId")
                        .HasName("star_constellation_pkey");

                    b.HasIndex("ConstellationId");

                    b.ToTable("star_constellation", (string)null);
                });

            modelBuilder.Entity("StarApi.Model.Constellation", b =>
                {
                    b.HasOne("StarApi.Model.Galaxy", "Galaxy")
                        .WithMany("Constellations")
                        .HasForeignKey("GalaxyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("constellation_galaxy_id_fkey");

                    b.Navigation("Galaxy");
                });

            modelBuilder.Entity("StarApi.Model.Galaxy", b =>
                {
                    b.HasOne("StarApi.Model.Universe", "Universe")
                        .WithMany("Galaxies")
                        .HasForeignKey("UniverseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("galaxy_universe_id_fkey");

                    b.Navigation("Universe");
                });

            modelBuilder.Entity("StarApi.Model.Planet", b =>
                {
                    b.HasOne("StarApi.Model.Star", "Star")
                        .WithMany("Planets")
                        .HasForeignKey("StarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("planet_star_id_fkey");

                    b.Navigation("Star");
                });

            modelBuilder.Entity("StarApi.Model.Star", b =>
                {
                    b.HasOne("StarApi.Model.Galaxy", "Galaxy")
                        .WithMany("Stars")
                        .HasForeignKey("GalaxyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("star_galaxy_id_fkey");

                    b.Navigation("Galaxy");
                });

            modelBuilder.Entity("StarConstellation", b =>
                {
                    b.HasOne("StarApi.Model.Constellation", null)
                        .WithMany()
                        .HasForeignKey("ConstellationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("star_constellation_constellation_id_fkey");

                    b.HasOne("StarApi.Model.Star", null)
                        .WithMany()
                        .HasForeignKey("StarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("star_constellation_star_id_fkey");
                });

            modelBuilder.Entity("StarApi.Model.Galaxy", b =>
                {
                    b.Navigation("Constellations");

                    b.Navigation("Stars");
                });

            modelBuilder.Entity("StarApi.Model.Star", b =>
                {
                    b.Navigation("Planets");
                });

            modelBuilder.Entity("StarApi.Model.Universe", b =>
                {
                    b.Navigation("Galaxies");
                });
#pragma warning restore 612, 618
        }
    }
}
